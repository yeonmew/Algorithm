import time
import random
import numpy as np

def merge_sort(arr):
    if len(arr) <= 1: #크기가 1이하면 반환
        return arr

    mid = len(arr) // 2 #배열을 2분할
    right = merge_sort(arr[:mid]) #중간부터 끝까지 아래 배열에 분할
    left = merge_sort(arr[mid:]) #처음부터 중간까지 위 배열에 분할

    merge_arr = []
    r = l = 0
    while l < len(right) and r < len(left): #쪼개진 데이터를 정렬하며 병합
        if right[l] < left[r]: #작은 원소부터 배열에 추가한다.
            merge_arr.append(right[l])
            l += 1
        else:
            merge_arr.append(left[r])
            r += 1

    merge_arr += right[l:]
    merge_arr += left[r:]

    return merge_arr

#  1) 1~1000만까지 순서대로 숫자가 저장된 배열
arr = np.array([])
arr = np.array(range(1, 10000000)) #1~1000만까지 arr에 저장

time1 = time.time()
merge_sort(arr)
print('1~1000만까지 순서대로 숫자가 저장된 배열 시간 측정  =   ', time.time() - time1)

#  2) 1000만~1까지 순서대로 숫자가 저장된 배열
arr = np.array([]) #배열 초기화 후 다시 진행
arr = np.array(range(10000000,1,-1)) #1000만~1까지 arr에 저장

time2 = time.time()
merge_sort(arr)
print('1000만~1까지 순서대로 숫자가 저장된 배열 시간 측정  =   ', time.time() - time2)

#  3) 균등하게 섞여있는 배열(크기는 1000만)
arr = np.array([]) #배열 초기화 후 다시 진행
for i in range(1, 10000000):
    arr = np.append(arr, np.array(random.randint(1,10000000)))

time3 = time.time()
merge_sort(arr)
print('균등하게 섞여있는 배열(크기는 1000만) 시간 측정  =   ', time.time() - time3)